install.packages('IRkernel')
version
install.packages("ggplot2")
R version
R --version
version
install.packages("ggplot2")
library(readxl)
API_SE_PRM_CMPT_ZS_DS2_en_excel_v2_1624435 <- read_excel("Downloads/API_SE.PRM.CMPT.ZS_DS2_en_excel_v2_1624435.xls")
View(API_SE_PRM_CMPT_ZS_DS2_en_excel_v2_1624435)
library(ggplot2)
x <- c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
x
y <- x^3
y
qplot(x,y)
# normal case
a <- c(1, 2, 3, 4)
b <- c(10, 20, 30, 40)
a + b # output: c(11, 22, 33, 44)
a - b # output: c(-9, -18, -27, -36)
# vector recycling
c <- c(1, 2, 3, 4, 5, 6, 7, 8)
d <- c(10, 20, 30, 40)
c + d # output: c(11, 22, 33, 44, 15, 26, 37, 48)
c - d # output: c(-9, -18, -27, -36, -5, -14, -23, -32)
# normal case
a <- c(1, 2, 3, 4)
b <- c(10, 20, 30, 40)
a + b # output: c(11, 22, 33, 44)
a - b # output: c(-9, -18, -27, -36)
# vector recycling
c <- c(1, 2, 3, 4, 5, 6, 7, 8)
d <- c(10, 20, 30, 40)
c + d # output: c(11, 22, 33, 44, 15, 26, 37, 48)
c - d # output: c(-9, -18, -27, -36, -5, -14, -23, -32)
h <- readline(prompt="Enter height(m): ")
print(as.integer(w/h^2))
h <- readline(prompt="Enter height(m): ")
w <- readline(prompt="Enter weight(kg): ")
print(as.integer(w/h^2))
# 2. matrix multiplication with matrix
"
the element-wise multiplication of two matrices take place
it will be multiplied if the maxtrix have the same dimension
"
is()
is()
x <- c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
x
y <- x^3
y
qplot(x,y)
is()
x<-10
y<-15
x+y
x-y
z<-x*2
z
is()
plot(cars)
---
matrix calculation
```{r}
x<-1:20
z<-matrix(x,4,5)
```
```{r}
x<-1:20
z<-matrix(x,4,5)
```
---
matrix calculation
```{r}
x<-1:20
x
```
```{r}
x<-1:20
x
```{r}
x<-1:20
x
```
---
matrix calculation
```{r}
x<-1:20
x
```
x<-10
y<-20
z<-x+y
z
install.packages("matlib")
x<-1:16
x
y<-2:17
y
z<- matrix(x,4,4)
z
w<-matrix(y,4,4)
w
x<-1:16
x
y<-2:17
y
z<- matrix(x,4,4)
z
w<-matrix(y,4,4)
w
z+w
z-w
det(w)
x<-1:16
x
y<-5:17
y
z<- matrix(x,4,4)
z
w<-matrix(y,4,4)
w
z+w
z-w
det(w)
x<-1:16
x
y<-5:20
y
z<- matrix(x,4,4)
z
w<-matrix(y,4,4)
w
z+w
z-w
det(w)
x<-1:16
x
y<c(8,9,10,3,-8,9,13,1,9,11,16,20,5,32,12,18)
y
z<- matrix(x,4,4)
z
w<-matrix(y,4,4)
w
z+w
z-w
det(w)
x<-1:16
x
y<-c(8,9,10,3,-8,9,13,1,9,11,16,20,5,32,12,18)
y
z<- matrix(x,4,4)
z
w<-matrix(y,4,4)
w
z+w
z-w
det(w)
x<-1:16
x
y<-c(8,9,10,3,-8,9,13,1,9,11,16,20,5,32,12,18)
y
z<- matrix(x,4,4)
z
w<-matrix(y,4,4)
w
z+w
z-w
det(w)
z %*% w
inv(w)
library(matlib)
install.packages("matlib")
library(matlib)
z<- c(1:3, NA)
z<- c(1:3, NA)
z<- c(1:3, NA)
z
z<- c(1:3, NA)
z
ind<-is.na(z)
z<- c(1:3, NA)
z
ind<-is.na(z)
ind
x<-matrix(x<1:9,dim(3,4))
x<-matrix(x<1:9,3,3)
x
x<-matrix(x<-1:9,3,3)
x
x<-matrix(x<-1:9,3,3,byrow = TRUE)
x
x<-matrix(x<-1:9,3,3,byrow = TRUE)
x
list(23,dd,888,ryt)
x<-matrix(x<-1:9,3,3,byrow = TRUE)
x
list(23,"dd",888,"ryt")
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
example_data
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
example_data$x
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
example_data$y
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
example_data[x]
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
example_data x
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
example_data [x]
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
example_data [y]
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
example_data [z]
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
example_data
library(readr)
library(tibble)
example_data_from_csv = read_csv("data/example-data.csv")
getwd()
example_data_from_csv = read_csv("data/example-data.csv")
z<- c(1:3, NA)
ggplot(data=diamonds)
ggplot2(data=diamonds)
library(ggplot2)
install.packages(c("ggplot2", "gcookbook", "MASS", "dplyr"))
install.packages(c("ggplot2", "gcookbook", "MASS", "dplyr"))
ggplot2(data=diamonds)
ggplot2()
library(ggplot2)
update.packages(ask = FALSE)
rm(list = ls())
r<-4+5
rm(list = ls())
library(dplyr)
#visualization
m<- ggplot2::mpg
m
#mapping
m %>% select(manufacturer,year) %>% rename(x=manufacturer,y=year)
#ggplot
ggplot(m=mpg, mapping = aes(x=model,y=cyl,color=class) + geom_point()+ggtitle("color asthetics")
#ggplot
ggplot(m=mpg, mapping = aes(x=model,y=cyl,color=class) + geom_point()+ ggtitle("color asthetics")
library(ggplot2)
#ggplot
ggplot(m=mpg, mapping = aes(x=model,y=cyl,color=class) + geom_point()+ ggtitle("color asthetics")
getwd()
getwd()
setwd("/home/kit/Documents/GitHub/Data_Science_RProgramming")
setwd("~/Documents/GitHub/Data-Science-RProgramming")
getwd()
x<-read.csv("ttest.csv")
View(x)
library(agricolae)
library(matrixStats)
library(haven)
library(datarium)
library(broom)
library(caTools)
library(statmod)
t.test(x$Before,x$After, mu=0, 'two-sided',paired = T)
t.test(x$Before,x$After, mu=0, alternative = 'two-sided',paired = T)
t.test(x$Before,x$After, mu=0, alternative = "two-sided",paired = T)
t.test(x$Before,x$After, mu=0, alternative = "two.sided",paired = T)
t.test(x$Before,x$After, mu=10, alternative = "two.sided",paired = T)
t.test(x$Before,mu=10, alternative = "two.sided")
mean(x$Before)
mean(x$After)
boxplot(x$Before,x$After)
boxplot(x$Before~x$After)
t.test(x$Before~x$After, mu=10, alternative = "two.sided",paired = T)
t.test(x$Before~x$After, mu=0, alternative = "two.sided")
t.test(x$Before~x$After, mu=0, alternative = "two.sided", var.eq =F )
t.test(x$Before~x$After, mu=0, alternative = "two.sided", var.eq =F,paired = F )
t.test(x$Before ~ x$After, mu=0, alternative = "two.sided", var.eq =F,paired = F )
library(dplyr)
library(dbplyr)
library(tidytext)
library(ggplot2)
library(aplot)
da<-ggplot2::mpg
View(da)
sample(da$displ,20)
sample(da,20)
sample(da,20, replace = F)
sample(da,20)
sample(da$displ,20)
t<-sample(da$displ,20)
table(t)
sample(x$Before,10)
?t.test
t.test(x$Before,mu=0, alternative = "two.sided")
x<-ggplot2::mpg
View(x)
sample(x$displ,20)
#randam sample
y<-sample(x$displ,20)
#t-test
t.test(y, mu=0, alternative = "two.sided")
?z.test
x<- read.csv("ttest.csv")
View(x)
class(x)
class(x$weight1)
class(x$weight2)
cor.test(x$weight1,x$weight2)
t.test(x$weight1 ~ x$weight2)
anova(x$weight1 ~ x$weight2)
x<- read.csv("ttest.csv")
View(x)
cor.test(x$weight2,x$weight1)
t.test(x$weight2 ~ x$weight1)
t.test(x$weight1 ~ x$weight2  )
x<- read.csv("ttest.csv")
View(x)
class(x)
class(x$weight1)
class(x$weight2)
cor.test(x$weight2,x$weight1)
t.test(x$weight1 ~ x$weight2  )
x<- read.csv("ttest.csv")
class(x)
class(x$weight1)
class(x$weight2)
cor.test(x$weight2,x$weight1)
x<- read.csv("ttest.csv")
cor.test(x$weight2,x$weight1)
mean(x$weight1)
mean( x$weight2)
y<-c(-11,-10,-8,-7,-6)
mean(y)
sd(y)
x<- read.csv("ttest.csv")
t.test(x,paired = T)
t.test(x$weight2,x$weight1,paired = T)
t.test(x$weight1,x$weight2,paired = T)
t.test(x$weight2,x$weight1,paired = T)
t.test(x$weight2,x$weight1)
t.test(x$weight2,x$weight1, paired =F, var.equal = F)
t.test(x$weight2,x$weight1, paired =F, var.equal = T)
sd(x$weight1)
var(x$weight1)
var(x$weight2)
t.test(x$weight1,x$weight2, paired =F, var.equal = T)
sd(x$weight1)
var(x$weight1)
var(x$weight2)
t.test(x$weight2,x$weight2, paired =F, var.equal = F)
t.test(x$weight1,x$weight2, paired =F, var.equal = F)
x<- read.csv("ttest.csv")
t.test(x$weight1,x$weight2, paired =F, var.equal = F)
t.test(x$weight2,x$weight1, paired =F, var.equal = F)
t.test(x$weight2,x$weight1)
t.test(x$weight2 ~  x$weight1, paired =F, var.equal = F)
t.test(x$weight2 ~  x$weight1, paired =F, var.equal = F)
t.test(x$weight1 ~  x$weight2, paired =F, var.equal = F)
t.test(x$weight1 ~  x$weight2, paired =F, var.equal = T)
x<- read.csv("ttest.csv")
t.test(x$weight1 ~ x$weight2, paired =F, var.equal = T)
t.test(x$weight1,x$weight2, paired =F, var.equal = T)
t.test(x$weight1,x$weight2, paired =T, var.equal = T)
t.test(x$weight1,x$weight2, paired =T, var.equal = T)
t.test(x$weight1 ~ x$weight2, var.equal = T)
y<-read.csv("chi-csv")
getwd()
y<-read.csv("chi.csv")
View(y)
chisq.test(y)
table(y$Country,y$Diet,y$Over.Weight,y$Education)
barplot(y$Country,y$Diet,y$Over.Weight,y$Education)
barplot(y$Country,y$Diet)
class(x$weight1)
class(y)
# two numeric variable :
ggplot2::mpg
# two numeric variable :
data<-ggplot2::mpg
View(data)
# dataset???
#stat cal(selecting z-test, t-test(Types), chi-square, corr, ANOVA)
# select the test based on variables datatype
dataset<-ggplot2::mpg
x<-read.csv("ttest.csv")
cor.test(x$weight1,x$weight2)
t.test(x$weight1~x$weight2)
t.test(x$weight1,x$weight2, paired = T)
t.test(x$weight1,x$weight2, paired = F)
t.test(x$weight1 ~ x$weight2)
t.test(x$weight1 , x$weight2)
x<- read.csv("ttest.csv")
t.test(x$weight1 ~ x$weight2)
m<-c(-11, -10, -8, -7, -6)
sd(m)
t.test(x$weight1, x$weight2,paired = T )
x<- read.csv("ttest.csv")
t.test(x$weight1, x$weight2,paired = T )
t.test(x$weight2, x$weight1,paired = T )
